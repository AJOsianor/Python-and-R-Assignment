Convolutional Neural Network (CNN) for Fashion MNIST Classification

This repository contains code to build and train a Convolutional Neural Network (CNN) using Keras to classify images from the Fashion MNIST dataset.

Setup and Requirements

Requirements

- Python (>= 3.6)
- Keras (>= 2.0)
- TensorFlow (or any other Keras backend like Theano, CNTK)
- numpy
- matplotlib (for visualization)

Installation

1. Clone this repository:

   git clone <repository_url>
   cd <repository_name>

2. Install dependencies:
 
   pip install -r requirements.txt
  
   Make sure to have the appropriate versions of Python and the dependencies installed.

Dataset Details

Fashion MNIST Dataset

The Fashion MNIST dataset is a collection of 28x28 grayscale images of 10 fashion categories, consisting of a training set of 60,000 examples and a test set of 10,000 examples. Each example is a 28x28 grayscale image, associated with a label from 10 classes.

The dataset can be directly loaded from Keras:

python
from keras.datasets import fashion_mnist

Load the Fashion MNIST dataset
(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()


Purpose

The purpose of using the Fashion MNIST dataset is to demonstrate the ability of the CNN model to classify images into one of 10 categories of clothing and accessories. This serves as a simplified benchmark for testing and prototyping image classification models.

Model Architecture

The CNN architecture used for this classification task is as follows:

1. Input Layer: 28x28 grayscale images.
2. Convolutional Layer 1: 32 filters of size 3x3, ReLU activation.
3. Max Pooling Layer 1: 2x2 pool size.
4. Convolutional Layer 2: 64 filters of size 3x3, ReLU activation.
5. Max Pooling Layer 2: 2x2 pool size.
6. Convolutional Layer 3: 64 filters of size 3x3, ReLU activation.
7. Flatten Layer: Flatten the 3D output to 1D.
8. Dense Layer: 64 neurons, ReLU activation.
9. Output Layer: 10 neurons (one for each class), softmax activation.

The model is compiled with Adam optimizer and sparse categorical cross-entropy loss function.

Running the Code

To train and evaluate the model:

1. Ensure all dependencies are installed (`requirements.txt`).
2. Run the following command:

   python fashion_mnist_cnn.py
   

This will train the CNN model on the Fashion MNIST dataset for 10 epochs by default, and then evaluate its performance on the test set.

Additional Information

- Model Training: The model is trained using batch size of 64 and validated on the test set after each epoch.
  
- Evaluation: After training, the modelâ€™s accuracy on the test set is displayed.
  
- Predictions: Two example predictions are made and displayed after training, showcasing the model's classification capabilities.
